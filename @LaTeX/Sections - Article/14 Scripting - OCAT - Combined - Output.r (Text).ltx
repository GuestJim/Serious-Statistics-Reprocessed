\section{Scripting: OCAT -- Combined -- Output.r (Text and HTML Outputs)}
\subCustomFunction
While the previous section was mostly concerned with the functions for processing the data into the desired statistics, this section's focus is on doing that processing and then the functions to create the text and HTML outputs.
The actual creation of the outputs will be in the following section though, as all outputs have been collected there.

One of the functions I make great use of for creating the text-based outputs is \textbf{aggregate}, a built-in function that will group data according to provided lists and then execute functions on these groups.
I will get to using it soon enough, but first is a function that addresses a quirk to it.
When the function \textbf{aggregate} is to run returns a list or vector of outputs, it will make the output into matrices that are then placed in a single column of the output data frame.
The name of this column will typically be "x" and to access the contents within the matrix it contains, you must use "x."
as a prefix for the matrix column name.
For example, to get the mean from an \textbf{aggregate} function that applied the \textbf{meansMS} function described in the previous section, you would select the "x.Mean" column.
The following function solves this problem by pulling out the matrix.

\subsubsection{sepCOL Custom Function (Separate Columns)}
\begin{styleR}
sepCOL	=	function(aggOUT)	{
	matCOL	=	sapply(aggOUT, is.matrix)
	out	=	cbind(aggOUT[, !matCOL], as.data.frame(aggOUT[, matCOL]))
	return(out)
}
\end{styleR}

Due to a reanalysis of how this function can operate because of changes to version 4.0.0 of R, I have redeveloped it into what I think is a better design.This \textbf{sepCOL} function that is responsible for separating the nested matrix into multiple columns has a single argument of \textbf{aggOUT}, for aggregate output.
The first line in the function's body uses the \textbf{sapply} function, which stands for simplified apply.
There is a family of apply functions in R that will apply a function repeatedly to some input.
Normally I will use \textbf{lapply}, which returns a list the same length as its input, with each element having had the supplied function applied to it, but in this case I want \textbf{sapply}.
This second function is just a wrapper of the first that will normally return a vector or a matrix, and in this case I want a vector instead of a list.

The task I am using \textbf{sapply} for is to produce a vector of those columns that are matrices, by applying \textbf{is.matrix} to each column in \textbf{aggOUT}.
The result will be a vector of FALSE and TRUE and I save this to \textbf{matCOL}, for matrix columns.

The next line creates the \textbf{out} variable that will be returned by the function, and really I could just directly return this, but I do not want to overcomplicate this line with another command.
The first function on the line is \textbf{cbind} for column bind, as it binds objects, such as data frames as I will be working with here, by their columns, producing a wider data frame in the end.
The first data frame consists of the columns of \textbf{aggOUT} that are not matrices.
To select these columns, I use the square bracket notation and invert the FALSE and TRUE logical values in \textbf{matCOL}.
You can select columns by giving their indices, by using their names, and by supplying TRUE and FALSE for which you do and do not want.

The second data frame for \textbf{cbind} is gotten by selecting the column that is a matrix and converting it to a data frame.
The values, data type, and names of the columns from the matrix will all be preserved by \textbf{as.data.frame}, but without the prefix for selecting the columns.
These two data frames are combined and then returned as the output.

The change to R version 4.0.0 that spurred this redesign is that the default for whether strings should be made into factors when creating a data frame has been changed from TRUE to FALSE.
I did a little analysis and realized this change would impact this function, but this new design works around it.
This design also has the advantage of preserving the ordered levels of the descriptive columns; GPU, API, Quality, and Location.
It does have the disadvantage of only working correctly when there is just one column that is a matrix, but that is all I need.
I could correct this, but it would make the function more complicated and I do not feel like disturbing this somewhat elegant design.

\subsubsection{AGG Custom Aggregate Function}
\begin{styleR}
AGG	=	function(datatype, FUN, ..., COL = NULL, ITEM = NULL, DATA = results)	{
	if	(!is.null(COL) & !is.null(ITEM))	DATA	=	DATA[DATA[, COL] == ITEM, ]

	GROUPS	=	list(GPU = DATA$GPU, API = DATA$API, Quality = DATA$Quality, Location = DATA$Location)
	if	(!testAPI)	GROUPS$API		=	NULL
	if	(!testQUA)	GROUPS$Quality	=	NULL
	
	return(sepCOL(aggregate(DATA[, datatype], GROUPS, FUN, ...)))
}
\end{styleR}

Just like when I originally wrote this article, I am at times taking breaks to rewrite portions of the scripts when I see a possibly better solution to a problem.
This is an example of that as I have now built the \textbf{AGG} custom function that significantly changes how I work with the \textbf{aggregate} function.
The two most important changes is that now the results of \textbf{aggregate} are not just stored in public variables to be accessed but will instead be made when needed, and the ability to subset the provided data before passing it to the \textbf{aggregate} function.
It also supports changing the function and using an arbitrary column, identified with \textbf{datatype}, which will make expansion far easier.

The arguments for \textbf{AGG} start with \textbf{datatype}, which will expect the name of the column in the original data, such as MsBetweenPresents for frame time.
The next argument is \textbf{FUN}, the function that will be executed on the data groupings, and then the third argument is the powerful \textbf{...}.
This allows arbitrarily elements to be accepted and passed on to wherever I placed dot-dot-dot in the function's body, which is at the end of the \textbf{aggregate} function as that is where it expects any arguments meant for \textbf{FUN}.
The only function I use that can require additional arguments is \textbf{ecdfFPS}, but regardless, it is a good idea to have this setup for potential future use.

After \textbf{...} are the two arguments \textbf{COL} and \textbf{ITEM}, which have the same purpose as the variables in the \textbf{INDIV} function in the Input.r script.
These are what will control the possible sub-setting of the data, which is held by the \textbf{DATA} argument and given the default value of \textbf{results}.
It is unlikely I will ever supply it with other data, but I still liked the idea of making it possible to change the data supplied to \textbf{AGG}.
Both \textbf{COL} and \textbf{ITEM} have default values of NULL, which is set to disable them

The first line of the function's body tackles working with a subset of \textbf{DATA}.
If both \textbf{COL} and \textbf{NULL} are not NULL then the value for \textbf{DATA} will be changed to that subset for which the values in column \textbf{COL} are \textbf{ITEM}.

Ideally, this now smaller version of \textbf{DATA} could be passed to \textbf{aggregate}, but that is not how it works.
Each object in list of grouping elements must be the same length as the data, so the smaller \textbf{DATA} is incompatible with \textbf{GROUPS} as was created in Input.r and previously was in this script as well.
The solution is easy enough though; create a new \textbf{GROUPS} from \textbf{DATA} and pass it to the coming \textbf{aggregate} function.
Just like in Input.r, the unnecessary elements are removed from the list.

By the way, it might be worth noting that by setting the columns equal to a term, that term will be used as the column name in the output of \textbf{aggregate}.
Also, the order of the elements in the list does matter, as this will be the order of the columns in the output.

With the new version of \textbf{GROUPS} created, we arrive at the actual call to \textbf{aggregate}, which uses square brackets to identify the specific column in \textbf{DATA} to use, and has its output passed to \textbf{sepCOL} within the \textbf{return} command.
Basically every step necessary for creating the statistics I want in the text outputs is handled by \textbf{AGG}, except the addition of FPS values, which is done by the next custom function.

\subsubsection{addFPS Custom Function (Adds FPS Unit Row)}
\begin{styleR}
addFPS	=	function(DATA, r = 2)	{
	numCOL	=	sapply(DATA, is.numeric)
	dataFPS		=	cbind(list("Unit" = "FPS"),	round(1000/DATA[, numCOL], 	r))
	dataMS		=	cbind(list("Unit" = "ms"),	round(DATA[, numCOL],		r))
	
	out	=	cbind(DATA[, !numCOL], rbind(dataFPS, dataMS))
	colnames(out)[grep("Unit", colnames(out))]	=	""
	return(out)
}
\end{styleR}

The \textbf{addFPS} function has received an overhaul after the changes I made to \textbf{sepCOL} to better recognize the columns containing data as opposed to those with the descriptors.
First though, the arguments are \textbf{DATA} and then \textbf{r} for controlling the number of places to round to.
My preference for rounding is two digits, so that is the default.

The first line is to find numeric columns, hence the variable storing the information being named \textbf{numCOL}.
In R, the floating point data type is called \textit{numeric} with \textbf{is.numeric} returning a TRUE or FALSE if the tested object is in fact a numeric value or not.

With the numeric columns identified, the next two lines handle creating the data frames that will hold the information as well as identify the units.
As I place the FPS data on top in the final outputs, I have the code for converting the frame times to frame rates first, with the conversion simply dividing 1000 by the values in \textbf{DATA}.
The square bracket notation correctly selects just the columns with the numeric values as it would not make sense to try division with a factor.
The frame rate values are then rounded according to the value of \textbf{r} and that serves as the right side in the call t \textbf{cbind}.
The left side is a single-element list, with that single element being "FPS" and the reason it is a list and not a vector is so the name "Unit" can be applied.

The next line that handles copying the frame time data and attaching a column identifying the units as milliseconds is very similar and simpler than the previous line, so there is no reason to go into it.

The next line of code uses booth \textbf{cbind} and \textbf{rbind} with \textbf{rbind} combining the \textbf{dataFPS} and \textbf{dataMS} data frames into a single, taller frame.
Something very important here is that the column names match, else \textbf{rbind} throws an error, which is why setting the "Unit" column name was important to do.

With that taller table made, it serves as the right side for \textbf{cbind} while the left side is the portion of the original table that does not contain numeric values, which would be the descriptors.
Because \textbf{numCOL} is holding a list of TRUE and FALSE values and we want those columns that are not numeric, the exclamation point is needed to invert the logical values.

It may occur to you that this left-side data frame is shorter than the right-side data frame being made by \textbf{rbind}.
This is true but R addresses in mismatched row counts by repeating the rows of the shorter column, which works fine because the ordering between \textbf{dataFPS} and \textbf{dataMS} will be the same.

Before the \textbf{return} command to get the new version of the data frame with the FPS data out of the function, I change its column names, removing "Unit."
My preference is to leave this column unlabeled because, I believe, its contents are clear enough to identify the purpose of the column and the missing name provides an easy to see division between the descriptors and the statistics.

\subsubsection{compTAB Custom Function (Compact Table)}
\begin{styleR}
compTAB	=	function(MEAN, PERC, ECDF)	{
	if	(is.null(listFPS))	{
		listECDF	=	grep("60 FPS", colnames(ECDF))
	}	else	{
		begECDF		=	grep(paste0(max(c(listFPS, 60)), " FPS"), colnames(ECDF))
		endECDF		=	grep(paste0(min(c(listFPS, 60)), " FPS"), colnames(ECDF))

		listECDF	=	begECDF:endECDF
	}

	compECDF	=	as.data.frame(ECDF[, listECDF])
	names(compECDF)	=	colnames(ECDF)[listECDF]

	out	=	cbind(
		MEAN,
		PERC[, sapply(PERC, is.numeric)],
		compECDF
	)

	colnames(out)[grep("Var.", colnames(out))]	=	""

	return(out)
}
\end{styleR}

This is the function responsible for creating the compact tables I share in articles, which is why I named it \textbf{compTAB}, though perhaps combined table would be better.
In any case, it takes \textbf{MEAN}, \textbf{PERC}, and \textbf{ECDF} as arguments, with these being the results from \textbf{AGG} with the custom functions described earlier.

The beginning of the function is an \textbf{if...else} statement that checks if the \textbf{listFPS} value set in the Input.r script is not NULL.
If it is, then \textbf{grep} is used to find the column named "60 FPS" and stores its index in the \textbf{listECDF} variable.
If \textbf{listFPS} is not NULL though, then things get a little more complicated as we must find a  beginning and end of \textbf{listECDF} so as to grab the desired columns from ECDF.

Finding the beginning and end of \textbf{listECDF} is not that difficult, thankfully, because I know I always want to include 60 FPS and every value in \textbf{listFPS}.
Within the appropriate lines, the variable and 60 are placed in a new vector and the \textbf{max} or \textbf{min} function is run to find the appropriate range of values.
These values are made into strings then with \textbf{paste0}, which also attaches " FPS" to it, and then \textbf{grep} is used to find the value in \textbf{ECDF}'s column names.

Ideally with \textbf{listECDF} we would be able to just grab the desired columns and go from there, but there is a quirk to square bracket notation that needs to be addressed.
When selecting just one column this way, only the contents are returned, not the column name.
To address this \textbf{compECDF} is created to hold the selected contents as a data frame.
With \textbf{names} then the column names from the selected columns can be applied to \textbf{compECDF} and that is then what will be used.

With \textbf{compECDF} created we can get to actually pulling together the compact table using \textbf{cbind}.
As I want the mean and median first, \textbf{MEAN} is the first frame passed to \textbf{cbind}.
Previously I had \textbf{addFPS} applied within this function, but I have decided to change this, so when \textbf{MEAN} and \textbf{PERC} are passed to \textbf{compTAB}, they must have that function already applied.
As the complete contents of \textbf{MEAN} are used, there is nothing more to it so we go to the next object for \textbf{cbind}.

As each of the tables that have been passed to \textbf{compTAB} include descriptor columns, they must be removed for \textbf{cbind} so they are not repeated.
By using what I learned when overhauling \textbf{sepCOL}, I can easily select just those columns with numbers in them for with \textbf{sapply} and the \textbf{is.numeric} function.
Of course this only applies to the \textbf{PERC} argument, as I want all of its number-containing columns, but for \textbf{ECDF}, we just built the list of columns to include from it.

Before returning the final compact table, the column names are edited to remove any containing "Var.", which would have been added by R for any column without a name.

\subsubsection{dataSEL Custom Functions (Data Selection and Removal)}
\begin{styleR}
dataSEL	=	function(datatype, COL = NULL, ITEM = NULL)	{
	if	(datatype == "MsBetweenPresents")		descs	=	c("Frame Time",		"data")
	if	(datatype == "MsBetweenDisplayChange")	descs	=	c("Display Time",	"disp")
	if	(datatype == "MsUntilRenderComplete")	descs	=	c("Render Time",	"rend")
	if	(datatype == "MsEstimatedDriverLag")	descs	=	c("Driver Lag",		"driv")
	
	type	<<-	descs[1];	typeSHORT	<<-	descs[2]

	MEAN	<<-	AGG(datatype,	meanMS,					COL = COL,	ITEM = ITEM)
	PERC	<<-	AGG(datatype,	percMS,					COL = COL,	ITEM = ITEM)
	ECDF	<<-	AGG(datatype,	ecdfFPS,	listFPS,	COL = COL,	ITEM = ITEM)
	STAT	<<-	AGG(datatype,	statMS,					COL = COL,	ITEM = ITEM)	
}

dataSEL.rm	=	function()	{
	rm(type, typeSHORT, MEAN, PERC, ECDF, STAT, envir = .GlobalEnv)
}
\end{styleR}

The \textbf{dataSEL} function has also been overhauled, quite significantly because of various other changes I have made.
For one, instead of selecting data that have already been computed and are being stored in some object, it will actually call the \textbf{AGG} function to do the computations.
As \textbf{AGG} has the ability to subset data as a feature, the \textbf{subOUT} function that was necessary before has been removed.
To control this sub-setting though, \textbf{dataSEL} now has the \textbf{COL} and \textbf{ITEM} arguments we have seen with other functions, as well as \textbf{datatype} to indicate which column of \textbf{results} should be used.

Within the function, we start with four \textbf{if} statements that check what \textbf{datatype} is, and based on what was provided, the \textbf{descs} variable is made.
This information is to provide a more readable version of the data type, such as "Frame Time" and a short identifier that is used just for file names.

After the \textbf{if} statements, the values of \textbf{descs} are super-assigned to the \textbf{type} and \textbf{typeSHORT} variables, which are used by the various output-making functions.
Super-assignment, done with the symbol \textbf{<<-}, assigns the value to the variable in a higher environment.
This makes it accessible outside of the current environment, which is the one temporarily created just for this function and removed once this function completes.

After this, the \textbf{MEAN}, \textbf{PERC}, \textbf{ECDF}, and \textbf{STAT} variables all have values computed from the properly called \textbf{AGG} function and super-assigned.
Previously I had what would be the outputs of \textbf{AGG} assigned to variables in the global environment with descriptive names, and then \textbf{dataSEL} super-assigned them to more generic names for easier access.
With this new design, the running of \textbf{AGG} is only done as needed and the output is directly saved to those generic names.
This is actually a better approach than before as those separate variables for each data type and statistics would have just been wasted memory until they were used.
Now they are only created when needed.

Also, and perhaps more importantly, this design is much easier to extend with additional data types, as it is only the \textbf{if} statements making the \textbf{descs} vectors that need to be expressly written.
This will not be the case for the graphs and their scales specifically, but if I want the text outputs for any other column in \textbf{results}, just adding a line to provide appropriate \textbf{type} and \textbf{typeSHORT} values is all that is needed.

I included a second function here that does something largely unnecessary, but I want it here just the same.
The purpose of \textbf{dataSEL.rm} is to remove the objects created by \textbf{dataSEL} from the global environment.
This would just be for troubleshooting, as clearing those values can be helpful when trying to track down some bug with the outputs

\subsubsection{sinkTXT Custom Function (TXT Output Creation)}
\begin{styleR}
sinkTXT	=	function(datatype, COL = NULL, ITEM = NULL)	{
	options(width = 1000)
	
	subSTR	=	""
	if	(!is.null(ITEM))	subSTR	=	paste0(" - ", ITEM, " - ")
	
	filePath	=	paste0(gameGAQF, " ", subSTR, type, ".txt")
	if	(!is.null(COL))	if	(COL	==	"GPU")	filePath	=	paste0(ITEM, "\\", filePath)
	
	sink(filePath, split = TRUE)

	writeLines(gameGAQ)
	writeLines(type)
	writeLines("\nMean")
	print(addFPS(MEAN), row.names = FALSE)
	writeLines("\nPercentiles")
	print(addFPS(PERC), row.names = FALSE)
	writeLines("\nPercentile of FPS")
	print(ECDF, 		row.names = FALSE)	
	writeLines("\nDistribution Stats")
	print(STAT,			row.names = FALSE)
sink()
}
\end{styleR}

All of the functions necessary to build the TXT file outputs have been covered, so here is the function to actually create the file, \textbf{sinkTXT}, so called because the \textbf{sink} command opens and closes file outputs.
Like \textbf{dataSEL}, its arguments are \textbf{datatype}, \textbf{COL}, and \textbf{ITEM} but not because this function does any sub-setting, but so the information about the sub-setting can be placed in the output.

Starting the body of the function is the \textbf{options} command with \textbf{width} set to 1000.
This increases the allowed width of the TXT output file, which is normally too narrow and breaks rows across multiple lines.

The next four lines of code handle naming the output file, including setting the file path.
First the \textbf{subSTR} variable is created as an empty string but if there is a value for \textbf{ITEM}, then it will be changed to that value with hyphens before and after.
Second the \textbf{filePath} string is built using \textbf{gameGAQF}, \textbf{subSTR}, and \textbf{type} as set by \textbf{dataSEL}.
The next line requires a couple conditions to be checked before being applied, but these must be checked sequentially else R complains.
The first condition is if \textbf{COL} is not NULL while the second is if it equals "GPU", and the reason these must be tested sequentially is because R has a problem trying to compare NULL with a string.
It returns an empty logical value, so neither TRUE nor FALSE and it does not know how to handle that in an \textbf{if} statement.
If both conditions pass, then \textbf{ITEM} is appended to the front of \textbf{filePath}, as that means the output should be saved in the selected GPU folder.

After this is handled, \textbf{sink} is called and given \textbf{filePath} so it knows where to save the file, and the name of the file to use.
The \textbf{split} argument is also present and set to TRUE, but can be set to FALSE if you wish.
What it does is send the output to both the screen and the file, which can be helpful for troubleshooting but is not necessary.

After opening the file to be written too, the contents need to be written starting with \textbf{gameGAQ}, to identify the game and describe the current configuration of GPU, API, Quality, and Location.
The \textbf{type} variables is then written, indicating the data type being presented.

After this, we start to get the actual data written into the file, along with lines to identify the type of data being looked at.
First is the \textbf{MEAN} data, so naturally it is identified with "\\nMEAN" first, with the new line symbol used to cleaning separate it from the previous text.
The default values for \textbf{MEAN}, and for \textbf{PERC} are only in milliseconds, so to generate the FPS data as well, \textbf{addFPS} is called.
The \textbf{print} command is what is used to print the information out to the TXT file, but it also has the argument of \textbf{row.names} set to FALSE.
No row names have been set for these data frames being written, so generic row indices would be written and I would prefer to not have them.

Both \textbf{MEAN} and \textbf{PERC} call for \textbf{addFPS} but it would be inappropriate for both \textbf{ECDF} and \textbf{STAT} as those values are not all frame times.

\subsubsection{HTML Formatting Functions}
\begin{styleR}
library(tableHTML)
OCCHTML	=	function(DATA)	{
	tableHTML(DATA, rownames = FALSE, class="OCC") %>%
	replace_html('style="border-collapse:collapse;" class=OCC border=1', 'align="center" border="1" cellpadding="1" cellspacing="1" style="width: 90%;"') %>%
	replace_html(' id=\"tableHTML_header_\\d\"', '', replace_all = TRUE) %>%
	replace_html(' id=\"tableHTML_header_\\d\\d\"', '', replace_all = TRUE) %>%
	replace_html(' id=\"tableHTML_column_\\d\"', '', replace_all = TRUE) %>%
	replace_html(' id=\"tableHTML_column_\\d\\d\"', '', replace_all = TRUE)
}

writeOCC	=	function(DATA, dataNAME, name=gameGAQF, fold = "")	{
	filePath	=	paste0(name, " - ", dataNAME,".html")
	if	(fold != "")	filePath	=	paste0(fold, "\\", filePath)
	
	write_tableHTML(OCCHTML(DATA), file = filePath)
}
\end{styleR}

Now we are at the point of setting up the creation of the HTML outputs with my preferred formatting.
First, however, the library I use to create the files must be loaded; \textit{tableHTML}.
There are other libraries that will also create HTML files, but this is the one I have been most successful at understanding and implementing.

After loading the library, I create the \textbf{OCCHTML} function which is what will actually create the HTML table itself from the \textbf{DATA} provided to it.
The \textbf{tableHTML} function is what will take an object from R and convert it to HTML, but there are a couple arguments I need to give it with one to disable row names  and the other to set the HTML table class.
For my use case I do not think the \textbf{class} is necessary but the function does not work without providing one.
While it is \textbf{tableHTML} that does the conversion, it is a different function, \textbf{write\_tableHTML} that actually writes the file.

After \textbf{tableHTML} we have the unusual symbol of "\%>\%" which is used to apply additional commands to one thing.
In this case, it is the \textbf{replace\_html} function being applied to what would be the default output of \textbf{tableHTML}.
The first call to \textbf{replace\_html} removes some table formatting and supplies some new formatting to better match what I use for the articles, such as border size, alignment, and width.
After this, the remaining calls to \textbf{replace\_html} are to clear out formatting for the separate cells in the HTML table.
I do not recall if these are necessary for reasons of viewing the table or viewing the HTML that builds it.
It might be the latter, so I can more easily review the contents of the table, in case I need to make manual changes.
(That should never be the case for these R scripts, but there are others I use to make HTML tables that can require some editing.In any case, the final four \textbf{replace\_html} calls are for removing the HTML \textbf{id} flag, which will be numbered at the end, which is why the "\\d" symbols are there, identifying any single digit.
To cover double-digit numbers, the symbol is applied twice.

After \textbf{OCCHTML} is the \textbf{writeOCC} function, which is basically a wrapper for \textbf{write\_tableHTML} by requiring certain arguments that are then passed to it.
The first argument is the \textbf{DATA} and then we have the \textbf{dataNAME}, which will identify the kind of data in the file, including data type, the sub-setting item, and which \textbf{AGG} output is contained in the file.
The next argument is \textbf{name} and by default it takes the \textbf{gameGAQF} value and will probably never need to be changed.
The final argument is \textbf{fold} and it is normally an empty string because it determines if the HTML file should be placed in a different folder.

In the function's body, we start by building the \textbf{filePath} string by concatenating \textbf{name} and \textbf{dataNAME} with a hyphen between them and ".html" at the end using \textbf{paste0}.
If the \textbf{fold} argument is not empty, however, then \textbf{filePath} will have the value attached at the beginning along with the "\\" symbol to separate the folder and file name.

With \textbf{filePath} built, \textbf{write\_tableHTML} can be called and it will write the output of \textbf{OCCHTML} with \textbf{DATA} passed to it to an HTML file located at \textbf{filePath}.

\subsubsection{sinkHTML Custom Function (HTML Output Creation)}
\begin{styleR}
sinkHTML	=	function(datatype, COL = NULL, ITEM	= NULL)	{
	ITEM.f	=	""
	if	(!is.null(COL) & !is.null(ITEM))		ITEM.f		=	paste0(ITEM, " - ")

	FOLD	=	""
	if	(!is.null(COL)) if	(COL	==	"GPU")	FOLD	=	ITEM
	
	writeOCC(addFPS(MEAN),								dataNAME = paste0(ITEM.f, typeSHORT, "MEAN"),	fold = FOLD)
	writeOCC(addFPS(PERC),								dataNAME = paste0(ITEM.f, typeSHORT, "PERC"),	fold = FOLD)
	writeOCC(ECDF,										dataNAME = paste0(ITEM.f, typeSHORT, "ECDF"),	fold = FOLD)
	writeOCC(STAT,										dataNAME = paste0(ITEM.f, typeSHORT, "STAT"),	fold = FOLD)
	writeOCC(compTAB(addFPS(MEAN), addFPS(PERC), ECDF),	dataNAME = paste0(ITEM.f, typeSHORT, "COMP"),	fold = FOLD)
}
\end{styleR}

Like the \textbf{sinkTXT} function earlier, this \textbf{sinkHTML} function is what will actually make the calls to create the HTML files.
Its design is also meant to be similar, which is why the arguments are the same.

Within the body, the first thing that happens is the creation of \textbf{ITEM.f}, the file name version of the \textbf{ITEM} argument, which is first an empty string.
Only if neither the \textbf{COL} nor \textbf{ITEM} arguments are NULL will this variable be changed to include the value of \textbf{ITEM} along with a hyphen for use in the file name.

Next the \textbf{FOLD} variable is created, with its value based on if the data is a subset based on the GPU.
Though \textbf{FOLD} is different from \textbf{filePath} in \textbf{sinkTXT}, its purpose and construction is the same, with their being sequential conditions checked.
If both checks return TRUE, then \textbf{FOLD} will be assign the value of \textbf{ITEM} which will be the current GPU for the subset.

With those values set, the calls to \textbf{writeOCC} can begin, starting with that for \textbf{MEAN}.
Just like in \textbf{sinkTXT}, \textbf{addFPS} is applied to the object, and it is applied to \textbf{PERC} as well.
The \textbf{dataNAME} argument for \textbf{writeOCC} is also built by concatenating the \textbf{ITEM.f}, \textbf{typeSHORT}, and the name I use for the object being made into an HTML table.
It is worth noting there is no space between \textbf{typeSHORT} and the object name, and this is intentional but no longer obvious.
Before I created the \textbf{AGG} function, its outputs were stored to variables with names that fit this same pattern, so the outputs and R variables matched.
Though the variables might not exist anymore, I am maintaining continuity.

The last call to \textbf{writeOCC} is a bit different from the others, as the \textbf{DATA} arguments for it is the output of the \textbf{compTAB} function.
Because the \textbf{MEAN} and \textbf{PERC} data frames do not have the frame rate values in them, it is necessary to apply \textbf{addFPS} to them here.
Technically this is inefficient, as \textbf{addFPS} is being applied twice to the same objects just lines apart, but the cost should be low and I would prefer to keep certain functions called just when needed.

\subsubsection{sinkOUT Custom Function (TXT and HTML Output Creation Calling)}
\begin{styleR}
sinkOUT	=	function(datatype)	{
dataSEL(datatype)
				sinkTXT(datatype)
if	(HTMLOUT)	sinkHTML(datatype)

if	(perGPU)	{	for (GPU in listGPU)		{	if	(!file.exists(GPU))	next
	dataSEL(datatype, COL	=	"GPU", ITEM = GPU)
					sinkTXT(datatype,	COL	=	"GPU", ITEM	=	GPU)
	if	(HTMLOUT)	sinkHTML(datatype,	COL	=	"GPU", ITEM	=	GPU)
}	}

if	(textAPI)	{	for (API in listAPI)		{
	dataSEL(datatype, COL	=	"API", ITEM = API)
					sinkTXT(datatype,	COL	=	"API", ITEM	=	API)
	if	(HTMLOUT)	sinkHTML(datatype,	COL	=	"API", ITEM	=	API)
}	}

if	(textLOC)	{	for (Location in listLOC)	{
	dataSEL(datatype, COL	=	"Location", ITEM = Location)
					sinkTXT(datatype,	COL	=	"Location", ITEM	=	Location)
	if	(HTMLOUT)	sinkHTML(datatype,	COL	=	"Location", ITEM	=	Location)
}	}
}
\end{styleR}

Now we have arrived at the function that actually handles getting the statistics to output, and calling the functions to create the outputs; \textbf{sinkOUT}.
My formatting conventions are a bit different here than other functions because I want it to be more vertically compact than if I were to give everything the new lines I would otherwise.

The function itself just takes the \textbf{datatype} argument, which makes sense as it is within this function that the \textbf{COL} and \textbf{ITEM} variables are made and given values.

The first line of the body calls \textbf{dataSEL} with the provided \textbf{datatype} value.
By calling this function, the results of several functions and commands are computed and super-assigned to values.
This super-assignment, as I explained at the time, is so the values can be accessed in other functions, such as the \textbf{sinkTXT} and \textbf{sinkHTML} functions occupying the next two lines.
Because of the \textbf{HTMLOUT} switch, so the HTML output files can be disabled while the TXT files are made, a conditional check is necessary to respect that, but to keep the calls to my two sink functions aligned, I have tab-indented \textbf{sinkTXT}.

After these calls to create the outputs for all of the \textbf{datatype} data in \textbf{results}, we have \textbf{if} conditionals and \textbf{for} loops to check if any subsets are desired, starting with GPU subsets.
The first check is if \textbf{perGPU} is TRUE or FALSE, and if it is TRUE, the \textbf{for} loop to go through the list of GPUs is opened.
The first step in the body of the \textbf{for} loop then is to check if the folder for the current GPU in the list exists.
If it does not exist, then \textbf{next} is used to move the loop on to the next iteration.

If that check passes, then the body of the \textbf{for} loop looks almost identical to the other two loops there are after this one.
First \textbf{dataSEL} is called with \textbf{COL} and \textbf{ITEM} values so the data will be a subset, and thanks to super-assignment, these values will be available to both \textbf{sinkTXT} and \textbf{sinkHTML} when they are called.
This format is repeated then if there is a desire for API or Location subsets, determined by the \textbf{textAPI} and \textbf{textLOC} switches.
The \textbf{COL} and \textbf{ITEM} arguments are all altered accordingly for these different loops.

That is actually where I want to end this section, as this finishes off the functions concerned with the text outputs.
The only exceptions are the actual calls to \textbf{sinkOUT} to save the outputs, which I have placed at the end of the file.
The next section is going to cover the functions concerned with the graphs as well as the calls to produce all of the outputs.