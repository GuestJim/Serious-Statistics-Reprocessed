\section{Scripting: OCAT -- Combined -- PA.r}

The purpose of this script is to take the multiple CSV data files and combine them all into one file, with information added to identify the configuration.
This information would by GPU, API, Quality configuration, and Location.

I think one thing I should address right away is that the name of the script is OCAT - Combined - PA.r and the reason for the - PA is to identify this as for the performance analyses.
I did have a version for the game reviews (OCAT - Combined - Review.r), but as this version works for both (provided I use the correct folder structure) I am no longer using the other script, but do not feel like dropping the - PA.
The Python script I will cover in the next section also has the - PA suffix, but again it is a legacy note.

I should also mention that any time I have a term surrounded by exclamation marks, the whole term is meant for the Python script to replace, if appropriate.

\subsubsection{R Library Loading}
\begin{styleR}
library(readr)

game = "!GAME!"
COMPRESS	=	TRUE

setwd("!PATH!")
\end{styleR}

These lines are the beginning of the script and serve to set certain things up for it.
The \textbf{library} function tells R to load the library named, \textit{readr} in this case, which provides R with functions for reading in different files, including CSVs.

The next line creates and sets the variable \textbf{game} to be the name of the game (or article).
The Python script will replace the !GAME!
term with the appropriate name, but it can also be typed in manually.

The following line is a control for the very end of the script when it comes time to export the result.
Besides being able to read and read CSV files, \textit{readr} is also able to do the same with compressed files.
As this script will effectively double the data footprint as the contents of multiple files are placed in a new file, such compression is appropriate.

The \textbf{setwd} function is to set the working directory, so all file names and paths R is told to use will be relative to this directory.
Like the !GAME!
term, !PATH!
will be replaced by Python, but you can also manually change it, though you will need to remember R uses / instead of \SBS for paths.

\subsubsection{OCATcomb Data Frame Creation}
\begin{styleR}
OCATcomb	=	data.frame(matrix(ncol = 24, nrow = 0))
\end{styleR}

I already explained this script is for loading in and combining multiple CSVs.
In order to do this the data needs to be stored in such a way that the data of each CSV can be combined, which is a little tricky.
You see, while there are functions that will combine the contents of multiple datasets, these separate datasets must first exist, which is why I am creating the \textbf{OCATcomb} variable here, and why it is empty.
The name \textbf{OCATcomb} is for OCAT.

There are two things going on here to create this variable, and the inner thing is creating a matrix.
This matrix has 24 columns and 0 rows to it.
This is important because the function I will use for combining the data is \textbf{rbind}, which stands for row bind and it requires the objects it works with to have the same number of columns.
The reason it has zero rows is so it is empty, and therefore combining it with the first of the CSVs will result in just the contents of the CSV.

The outer thing going on is to turn the empty matrix into an object called a data frame.
Data frames are a fundamental data structure to R, like the matrix, vector, list, and other data classes, but I would consider it one of the most powerful.
It is basically the closest to a data table and allows each column to be a different data type (strings or numbers, for example) and for rows and columns to have names.
Data frames must also be rectangular, which means there must be the same number of columns to every row, even if some elements in a row are empty.
This structure matches that of the CSV data and, indeed, when read, the CSV data will be a data frame normally.

\subsubsection{Locations List Creation}
\begin{styleR}
listLOC	=	c(
!LOC!
)
\end{styleR}

The \textbf{listLOC} variable is a list of the locations the data is collected from, and the !LOC!
term will be replaced by the Python script.
It may be worth noting though that R has multiple object types that can be thought of as lists.
This is specifically an atomic vector, one of the simplest, but there are also objects actually called lists that have some greater functionality.
Creating an atomic vector is very simple, by placing the elements within \textbf{c()}, and as it usually is all I need, you will see it a lot.
We will see the \textbf{list} data type in a different script, because of something they can do atomic vectors cannot.

Something you can see here that is pretty useful is that R is not bothered by line breaks, so the opening and closing of the vector can be on different lines, and the entries in it also occupy their own lines too.
You do need to make sure everything is properly closed though.

This next bit is a custom function I made for this script, and I feel it is best to introduce it as a whole and then examine its pieces.

\subsubsection{READ Function for Importing CSV}
\begin{styleR}
READ	=	function(fold="",	CSV,	GPU,	Quality = "",	API="")	{
	if (API != "")	API	=	paste0(API, "/")
	if (length(listLOC[1]) == 0)	listLOC	=	paste0("Recording ", 1:length(CSV))

	len	=	min(length(listLOC), length(CSV))
	out	=	data.frame(matrix(ncol = 24, nrow = 0))

	for (place in 1:len)	{
		if (CSV[place] != ".csv")	{
			fileLOC	=	paste0(fold, GPU, "/" , Quality, "/", CSV[place])
			if	(API != "")	fileLOC	=	paste0(fold, GPU, "/" , API, Quality, "/", CSV[place])

			if	(grepl(GPU, getwd()) & grepl(Quality, getwd()))		fileLOC	=	paste0(CSV[place])
			if	(grepl(GPU, getwd()) & !grepl(Quality, getwd()))	fileLOC	=	paste0(fold, API, Quality, "/",CSV[place])
		}	else {next}
		OCATtemp	=	read_csv(fileLOC)[, 1:20]

		OCATtemp$GPU		=	GPU
		OCATtemp$Quality	=	Quality
		OCATtemp$Location	=	listLOC[place]
		OCATtemp$API		=	gsub("/", "", API)
		out	=	rbind(out, OCATtemp)
	}
	return(out)
}
\end{styleR}

The first piece I want to address is the creation and closing of the function.

\subsubsection{Custom Function Example}
\begin{styleR}
READ	=	function(fold="",	CSV,	GPU,	Quality = "",	API="")	{
	...
	return(out)
}
\end{styleR}

When creating a function you can tell it what its arguments are.
In this case there are five arguments with the names \textit{fold}, \textit{CSV}, \textit{GPU}, \textit{Quality}, and \textit{API}.
When using the function, the values passed to it will be referred to by those names.
By setting the names equal to something, in this case empty strings, the variables will have default values of whatever you provided.
This allows one to not provide a value for each argument, but for the function to still opoerate correctly.
Functions in other scripts will be more important to have default values for.

After using the \textbf{function} command to create the function, the body of the function is held between curly brackets.
Generally whenever you are identifying the body of something, it is these brackets you use, and that includes when working with \textbf{if} statements and \textbf{for} loops.
If the body of the function can occupy a single line, however, then these brackets are not necessary.

This function is supposed to provide an output, so to identify what the output should be the \textbf{return} command is used, and in this case it is \textbf{out} that is returned.
Technically a function does not need an output, which will be seen in another script, and even here I could assign the output value to \textbf{OCATcomb} in such a way it will be applied to the global environment, but I choose not to.

\subsubsection{API Folder Check}
\begin{styleR}
if (API != "")	API	=	paste0(API, "/")
\end{styleR}

This \textbf{if} is to address that sometimes the API folder is present, and sometimes it is not by checking if the value of \textbf{API} is not equal to an empty string.
If there is an API value, then the CSVs will be under a folder by the name of the API, so the / must be added so R will know to look into this folder at a later command.
As string manipulation can be achieved in a single line, I have done so and the curly brackets are unnecessary.

I should also explain the \textbf{paste0} function, which is a variant of the \textbf{paste} function.
Both will take a list of strings, or some other data objects, and concatenate them together into a single string.
The difference between the functions is \textbf{paste0} will not apply a separation string between the elements, while \textbf{paste} can and does have a default value of a space.

\subsubsection{Locations List Check}
\begin{styleR}
if (length(listLOC[1]) == 0)	listLOC	=	paste0("Recording ", 1:length(CSV))
\end{styleR}

This is to address if there is not a list of location names to use, and checks by seeing how long the first entry in the \textbf{listLOC} is with the \textbf{length} function.
To identify it is just the first element we are interested in, \textbf{[1]} is used and the actual test for if the length is equal to zero requires \textbf{==}.
The two equal signs for testing equality is common for many if not all languages, and similarly the exclamation point is commonly used to check the Boolean inverse, or "not", hence why \textbf{!=} earlier was for not equal to.
Brackets can be used for more than just identifying specific elements in a list, as we will see as it can also grab multiple columns, or rows, or be used for subsetting the data.

If the test returns TRUE, then there was not a provided list of locations, so one needs to be created and for that I am using the \textbf{paste0} and \textbf{length} functions again as well as a shorthand for the \textbf{seq} function.

As its name suggests, \textbf{seq} is a function for generating a sequence of numbers.
The shorthand is the use of the colon with a numeric value on both sides.
The number of the left is the beginning of the sequence, and on the right the end of the sequence.
It assumes a step of 1, which is correct for my use here but \textbf{seq} does have a \textit{by} argument to control this.

The sequence I want is a list of numbers from 1 to the number of CSVs being worked on, as this will correspond to the number of locations.
This list of CSVs will be those for a specific configuration of GPU, API, and Quality, and as I do not repeat locations for the same configuration, the numbers will match.

The \textbf{paste0} function takes this list and appends to it the "Recording " string I provided, but there is something very important to note here.
The output of \textbf{paste0} will be a vector, and not a single string.
By default \textbf{paste0} will not collapse a vector to a single string, so it is now instead applying the string I provided to each element in the vector.
The function does have an argument named \textbf{collapse} and if it is given a value other than NULL (its default) it will collapse the list down to a single string, and that is something I want in a different script.

\subsubsection{Recording Count}
\begin{styleR}
len	=	min(length(listLOC), length(CSV))
\end{styleR}

This line sets a variable to be the minimum of the number of CSVs and the number of locations tested.
Honestly, I do not think this will ever come up for me, but it will catch the case where these numbers might be different, like if I forgot to name every location I recorded in, or do not have a recording for a location.

\subsubsection{for Loop Example}
\begin{styleR}
for (place in 1:len)	{
	...
}
\end{styleR}

There is a lot in this \textbf{for} loop, but first I will cover the loop itself.
Being a loop, it will run through whatever the commands are between the curly brackets for as many times as it takes to get through the given list.
The list is a sequence from 1 to the value of \textbf{len}, with a step of one.
The \textbf{place} variable is created by this loop and will hold the current value in that list.
Any name would work, but I am using \textbf{place} because it is for the place in the list of CSV files.

\subsubsection{next Command Example}
\begin{styleR}
if (CSV[place] != ".csv")	{
	...
}	else {next}
\end{styleR}

There are two \textbf{if} statements, but I want to cover the outer one first.
This one is to check for if there was not a CSV file provided at the current place.
Again this is not likely to happen, but was useful when I was originally creating the script.
The way it works is to see if the current line in the CSV list is not equal to ".csv."
The CSV list will be shown later, but for now it is just worth noting that the list is originally just the file name, without the extension so I use a \textbf{paste0} function to add that on.
If an element in the list were empty, it will then become just that extension.

In this case I want something specific done if the result of the test is FALSE, so I am using the \textbf{else} statement as well.
The code to be executed for this situation is also contained within curly brackets, and that is the \textbf{next} command.
This command tells the loop to stop its current operation and go to the next iteration.
This way the loop will skip any missing CSV file names and go to the next place in the list.

\subsubsection{File Location Construction}
\begin{styleR}
if (CSV[place] != ".csv")	{
	fileLOC	=	paste0(fold, GPU, "/" , Quality, "/", CSV[place])
	if	(API != "")	fileLOC	=	paste0(fold, GPU, "/" , API, Quality, "/", CSV[place])

	if	(grepl(GPU, getwd()) & grepl(Quality, getwd()))		fileLOC	=	paste0(CSV[place])
	if	(grepl(GPU, getwd()) & !grepl(Quality, getwd()))	fileLOC	=	paste0(fold, API, Quality, "/",CSV[place])
}	else {next}
\end{styleR}

I have a lot going on within the \textbf{if} statement, but it is not that bad, I promise.
The entire purpose here is to build the \textbf{fileLOC} variable, which holds the file location information.
I described previously the files are hold in a folder structure that, within the OCAT Data folder, starts with the GPU, then the API, the Quality, and finally we have the files themselves.

The first declaration of \textbf{fileLOC} creates a version of the file path with both the GPU and Quality folders in the path.
It is assuming there is no API folder to be concerned with and it also has the \textbf{fold} variable, which I will explain now.
Its purpose is purely as a precaution for a scenario where I might have an additional folder level at the top of this.
One possible example could be a CPU, if I were to test multiple CPUs as well as GPUs and so on, or if I were to compare multiple games.
I doubt I ever will use this capability, but I still want it there to be safe.

The second declaration of the variable is behind an \textbf{if} condition that simply checks if there is an API to consider or not.
Actually, because the \textbf{API} variable will be an empty string if not used, I could just use this declaration of \textbf{fileLOC} and remove the previous, but I somewhat prefer to keep it this way, as a visual reminder.

The next two declarations are for two specific possibilities.
The first is if the script is running inside the same folder as the CSVs, which is a common situation.
The check the \textbf{if} condition does uses the \textbf{grepl} function that will search a string to see if a given pattern is present in it, and then return TRUE or FALSE.
The pattern it searches for is given first, and for that I use the GPU name, and the string it searches is the current working directory, which is returned by the \textbf{getwd()} function.

This is not the only check being done though, as you can see by the second \textbf{grepl}, which is checking for the presence of the \textbf{Quality} variable in the current working directory.
If both the GPU name and the Quality name are in the working directory, that means we are in the folder with the CSVs, as those are the beginning and end of the relative path from the OCAT Data folder.
This means the file location is just the file name itself.
To make sure both checks are TRUE, the ampersand, \&, symbol is used as it stands for AND, which will only return TRUE when all conditions it connects are TRUE.
There is also the pipe symbol, |, that is used for OR and will return TRUE when any of the conditions are TRUE.

The final \textbf{fileLOC} declaration is for a situation I doubt I will use much, but is there because it is a reasonable possibility.
This situation would be for if I want to work with all of the data for a specific GPU, which means I am within the GPU's folder.
This is why the GPU name must be found in the working directory, but the Quality name must not be.
One reason why I doubt I will ever use this specific capability is that there are other ways available to me to achieve this same goal by finding subsets within larger datasets, but that is something for a different script.

\subsubsection{Temporary Data Frame Creation}
\begin{styleR}
OCATtemp	=	read_csv(fileLOC)[, 1:20]
\end{styleR}

With the file location determined by the previous code, we can now actually use it with the \textbf{read\_csv} function from the \textit{readr} library.
It has several arguments, some which can be necessary in certain circumstances, but not here.
For this use, all the function needs is to be told where the CSV to read is.
There is more to this line of code than that though, with the square brackets following the call to the function.

As I mentioned earlier, square brackets can be used to identify more than just a single element from a list, but to grab columns or rows, or to subset data.
The format for doing this is to identify the desired rows and then the desired columns with a comma separating them.
I want every row from the data being read in, so I have nothing on the left of the comma.
On the right, however, I have a shorthand sequence of the numbers 1 through 20, which means I want the first twenty columns.
If you look at a CSV from OCAT, you will see all of the data is contained in these first twenty columns, with subsequent columns holding other information such as the CPU and GPU.
Important information, yes, but I do not need it stored here.
Actually, I could even remove a couple columns as I do not need the screen width and height recorded here either, but I am fine keeping it.

The way this bracket notation can be used to find a subset of results will be shown in a different script.

Returning to the \textbf{read\_csv} function, it returns a special kind of data frame called a tibble.
This is a data type used by \textit{readr} and other libraries made by Tidyverse, but for almost all of my purposes, are identical to data frames.
That is definitely the case in this script.
Because the function returns a data frame, the bracket notation can be applied to it as though it were a variable storing a data frame, because effectively that is what is happening.
This subset of that data is then assigned to the \textbf{OCATtemp} variable, a temporary holder of the OCAT data.

\subsubsection{Configuration Columns}
\begin{styleR}
OCATtemp$GPU		=	GPU
OCATtemp$Quality	=	Quality
OCATtemp$Location	=	listLOC[place]
OCATtemp$API		=	gsub("/", "", API)
\end{styleR}

At this stage we are taking advantage of a useful assumption R will make with regards to data frames and other objects that support names.
I have covered previously how the bracket notation works to identify columns of a data frame, but another means is to use the \$ symbol to grab a column of a specific name.
If no column by that name exists when you ask for it, R will return NULL, but if you assign a value to this non-existent column, it will create the column.
It will also assign the name you used to identify the column and the value given too.
This top line creates the GPU column for the \textbf{OCATtemp} data frame and then assigns to that column the value of the \textbf{GPU} variable.
Quite appropriately, R repeats this value for every row in the data frame.

Similarly, columns are created for the Quality, Location, and API, though the creation of the API column is a little special.
Remember, I added the / character to the value of \textbf{API}, so I use \textbf{gsub} to remove it now.
This function is related to the \textbf{grepl} function, but instead of reporting if a pattern is present in a string, it searches for a pattern ("/"), replaces it with a provided pattern ("", an empty string), within the provided string (the \textbf{API} variable).

\subsubsection{Combining Data Frames}
\begin{styleR}
out	=	rbind(out, OCATtemp)
\end{styleR}

With the columns applied to identify the configuration of the data from the current CSV, the contents of \textbf{OCATtemp} are concatenated onto the \textbf{out} data frame using \textbf{rbind}.
For the first run of the \textbf{for} loop, the result will just be the contents of \textbf{OCATtemp}, but for every subsequent iteration, \textbf{out} will store the contents of multiple \textbf{OCATtemp} data frames, which is multiple CSVs.

\subsubsection{Setting Function Output}
\begin{styleR}
return(out)
\end{styleR}

Now we can end the loop and the \textbf{READ} function itself, but to do that we must state what the output of the function is.
This is done with the \textbf{return} command, which also ends the execution of the function.

\subsubsection{Text to Be Replaced}
\begin{styleR}
!LONG!
\end{styleR}

As you can hopefully guess, this is something the Python script will replace, but because that is not going to help us much now, here is an example of what it will place there.

\subsubsection{CSV List Example}
\begin{styleR}
GPU	=	"RX Vega 64"
CSV	=	c(
"OCAT-Sam2017.exe-2019-07-20T105950",
"OCAT-Sam2017.exe-2019-07-20T110524",
"OCAT-Sam2017.exe-2019-07-20T111116"
)
CSV	=	paste0(CSV, ".csv")
OCATcomb	=	rbind(OCATcomb, READ("", CSV, GPU, "Max", "DirectX 11"))
\end{styleR}

As you can see the GPU variable is set, the CSV list is created with names for the CSV files, and then the ".csv" extension is pasted on the end of the file names.
The last bit is to run the \textbf{READ} function and concatenate it to the \textbf{OCATcomb} variable.
This combination is then assigned to \textbf{OCATcomb}.

We can see how the \textbf{READ} function is having values supplied for its arguments, and because I am using every argument and in the same order, just the values are provided.
In two cases, the values are actually variables, so R will get the values of those variables and pass that into the function.
It is possible to use a different order by using the argument name, such as API = "DirectX 11" but is not necessary here.

\subsubsection{CSV Writing with Compression}
\begin{styleR}
if	(COMPRESS)	{
	write_csv(OCATcomb, "@Combined - !QUA!.csv.bz2")
}	else	{
	write_csv(OCATcomb, "@Combined - !QUA!.csv")
}
\end{styleR}

Finally we are at the end of the file and the \textbf{COMPRESS} switch set at the beginning is used.
This switch controls whether the \textbf{OCATcomb} data should be exported to a normal CSV or if it should be compressed.
I have it set to use bzip2 compression but gzip and lzma are also offered by using the .gz and .xz extensions, respectively.
Having tested the different methods, I have decided on bzip2 as it produces the best compression, though gzip is faster but also produces the largest file of the three.
With lzma, the output was still larger than bzip2 and took the longest by far, so I would not bother with it.
The bzip2 compressed file did take longer to read than the others, but the difference was small enough that I consider it still the best method of the three to use.

Going within the \textbf{if...else} statement, we see the \textbf{write\_csv} function from \textit{readr}.
The two arguments I am passing it are for the data to be written to a file, and the path the output file should be written to.
It will inherit the current working directory so only the file name is needed.
In one version, the file name includes the .bz2 extension, indicating this compression should be used, while the other version will write an uncompressed CSV.
In both cases the !QUA!
term will be replaced by the Python script to identify the Quality configuration for the data it will contain.

That finishes this script, so now we can get to the next one, which is the Python script that does the replacements necessary in this script and another, as well as placing the R scripts where they need to be.
