\section{Scripting: OCAT -- Combined -- Output.r (Statistics)}
\subCustomFunction

At last, the Output.r script where all of the actual data processing is done to generate the statistics, graphs, and outputs.
It was a sizeable script when I originally wrote this article, and has actually grown since then, so describing it across separate sections remains a good idea.
Besides growing, I have also shuffled around some parts of the script, so there might be code in different sections as a result, but nothing too extreme happened.
Mainly I re-ordered the functions and moved the calls to produce outputs, text-based and graphs, to the end of the file.
With that addressed, time to start into this script.

\subsubsection{Graph Breaks}
\begin{styleR}
yrates	=	c(c(120, 60, 30, 20, 15, 12, 10), yratesEXT)
yrates	=	sort(c(yrates,-yrates))
ytimes	=	sort(1000/yrates)
ybreaks	=	sort(c(round(ytimes, 2), 0))
ms2FPS	=	function(DATA, r = 0)	round(1000/DATA, r)
\end{styleR}

This code, and some to follow, is concerned with the breaks and labels for the graphs.
The first line creates \textbf{yrates}, the variable I use to store the frame rates I wish to see breaks at on the graphs.
As you can see, this list consists of 120, 60, 30, 20, 15, 12, and 10, but there is also the \textbf{yratesEXT} object there.
This is a variable that is set in Input.r and allows additional rates to be added to this list, and this addition is done by placing both vectors inside another.
Vectors are single-level objects, so R recognizes that trying to place one vector inside of another means to combine them.
Lists do support multiple levels, but that is not what I want here.

The second line does a little work to \textbf{yrates} by mirroring it and sorting it.
The mirroring is only necessary for the Consecutive Difference graphs, as approximately half of the differences are negative.
Sorting the breaks makes some of the processing with labels helpful, but \textbf{yrates} is also not used directly, so it is not necessary.

The next line creates the \textbf{ytimes} variable that converts \textbf{yrates} from measurements of rate to measurements of time, but is also not used directly.
It is closer to what is used, though, \textbf{ybreaks}.
The differences between these two variables are that \textbf{ybreaks} has been rounded to two digits, and the inclusion of 0.
This addition of a term necessitates using \textbf{sort} again.

The last line in this block is the function \textbf{ms2FPS} and it converts from frame times, with the unit of milliseconds, to frame rate, with the unit of frames per second.
This is used with the secondary axes of some graphs to show the frame rate values on the same graph as the frame time.
I keep it with these variables because it would be applied to their values in the graphs.

\subsubsection{labelBreak Function}
\begin{styleR}
labelBreak	=	function(breaks, SEC = FALSE)	{
	if (!app.BREAK)	return(breaks)
	BREAK	=	c("", "\n")
	if	(is.numeric(breaks)	&	0 %in% breaks)	if	((which(breaks %in% 0) %% 2) == 0)	BREAK	=	rev(BREAK)
	if	(!SEC)	return(	paste0(rep(BREAK, length.out = length(breaks)),	breaks)	)
	if	(SEC)	return(	paste0(breaks, rep(BREAK, length.out = length(breaks)))	)
}
\end{styleR}

This is definitely a different \textbf{labelBreak} to what appeared in the original article, but is also much more powerful.
The function's purpose is to add line breaks to scale labels on the graphs, to avoid the labels writing over each other.
Previously I did this in a single line but have since added some intelligence and controls.
The new intelligence is to identify where 0 is in the breaks, so as to prevent its label from getting a line break.
I feel zero is an appropriate label to have in a more fixed position.

The two controls I have added are for disabling the breaks altogether and to handle the vertical alignment of secondary axes better.
The primary X-scale is along the base of the graph and uses a top vertical alignment, so a line break placed at the beginning of the label pushes the text down.
The secondary X-scale is along the top of the graph and so it uses a bottom vertical alignment.
This requires the line breaks are placed after the text of the label, to push it up.
This is controlled with the \textbf{SEC} argument while disabling the function is achieved with the \textbf{app.BREAK} switch set in Input.r.
It disables the function by simply returning the breaks immediately, without any changes applied to them and \textbf{SEC} being TRUE or FALSE determines the where the \textbf{BREAK} pattern is concatenated onto the provided \textbf{breaks}.

The creation of the \textbf{BREAK} pattern on the second line of the function is important for the preventing a label for 0 from having a line break applied to it.
After this pattern is set, there are multiple \textbf{if} statements and conditions to check that I have placed all on one line for compactness.
It might be hard to read though, if you do not know what every symbol used means to R.

The first condition in the first \textbf{if} statement checks if the \textbf{breaks} provided are numbers of not using \textbf{is.numeric}.
If they are not, such as in the Means graph that identifies the GPU on the X-axis, then the search for 0 will be stopped before it starts and throws an error.

The second condition tests for if 0 is in the provided \textbf{breaks} using \textbf{\%in\%}.
As the name of this operator suggests, \textbf{\%in\%} checks for a value is present in some list.
In this case, the value is 0 and if it is not in the list of \textbf{breaks}, then there is no reason for the pattern to be changed.

If both conditions return TRUE, then we get to the second \textbf{if} statement, that checks if the 0 will be moved by the line breaks anyway.
To determine this, we need to know where 0 is in the list, and then if that position is odd or even.
For the \textbf{BREAKS} pattern given, it is the even positions that get the line breaks, so when 0 is in an even place, the pattern is reversed, so 0 will not be impacted.

To determine where 0 is in the breaks, we actually need to reverse the order of the \textbf{\%in\%} operation earlier.
By doing this, instead of check if 0 is in \textbf{breaks}, it checks each element in \textbf{breaks} is 0 or not.
I could possibly use the \textbf{==} operator instead, but for some reason I am still using \textbf{\%in\%}, which works just as well.
Regardless, this produces a list consisting of TRUE and FALSE with TRUE present only where the 0 is.
To determine which element in this list is TRUE, the aptly-named \textbf{which} function is applied and the value it returns is what we need to determine is odd or even.
To do this, the modulus operator is used, \textbf{\%\%}.
The modulus is an mathematical operator for returning the remainder when dividing one value by another.
If the first value is even and it is divided by 2, the remainder is 0, which is the actual test for this condition.
If it is 0, then the pattern is reversed so it is the odd positions in \textbf{breaks} that will have the line break applied, and the even positions will be unaltered.

\subsubsection{Label Functions}
\begin{styleR}
# labelRound	=	function(breaks)	sprintf("%.1f", breaks)
labelRound	=	function(breaks)	round(breaks, 1)
labelRoundB	=	function(breaks)	labelBreak(labelRound(breaks))
ms2FPS.lab	=	function(breaks)	labelBreak(ms2FPS(breaks), SEC = TRUE)
labelBreakQQ=	function(breaks)	labelBreak(paste0(pnorm(breaks) * 100, "%"))
labelDisp	=	function(breaks)	round(breaks * 60/1000, 1)
labelDispB	=	function(breaks)	labelBreak(labelDisp(breaks))
\end{styleR}

This block is all label functions, and as you can see many of them actually call \textbf{labelBreak} so its functionality does not need to be repeated multiple times.
At the top of this block, however, is a commented out function that I keep just for future reference.
You see, this and the following version of \textbf{labelRound} both exist to round the values of the \textbf{breaks} provided to them, but the version with \textbf{sprintf} will force zero padding while the \textbf{round} function will not.
While I will admit I think zero padding can look better as the digits align, it can also unnecessarily add digits to the scale.
These are scales, after all, there is no reason for zero-padding since precision is not a necessity in labels and the breaks themselves are arbitrarily decided on by the graph creator, further making such precision as zero-padding suggests unnecessary and even inappropriate.

The only difference between \textbf{labelRound} and \textbf{labelRoundB} is the application of \textbf{labelBreak}, and this is also the only difference between \textbf{labelDisp} and \textbf{labelDispB}, so I doubt any special explanation is needed for the variants.

The \textbf{ms2FPS.lab} function is also a variant that applies \textbf{labelBreak} but is a little different because its target is the secondary X-axis, which is why the \textbf{SEC} argument is TRUE.
In most of the graphs, the frame time is on the Y-axis, and labels for this scale do not need line breaks, but the Frequency graph has it on the X-axis, making this variant necessary.

The \textbf{labelBreakQQ} function is a special version for the QQ graph that applies a transformation from z-scores to percentiles.
This is achieved with the \textbf{pnorm} function, but to make it percentages, we must multiple its output by 100.
I then attach the percentage symbol to these values and pass that result to \textbf{labelBreak}, which actually helps avoid a potential issue.
The breaks are normally numbers for the QQ graph, so \textbf{labelBreak} would want to find the zero and protect it from having a new line attached to it.
However, because I attach the percentage symbol to it, the breaks are now strings and so the function does not even try to find the number zero, avoiding any issue that could otherwise appear.

The \textbf{labelDisp} functions are for the graphs when display time is used, because I use a different unit for the scale.
Instead of using milliseconds directly, I use a count of 60 Hz cycles, because that is the refresh rate of my monitor, and I suspect the monitors of many readers.
Since the MsBetweenDisplayChange data is the measurement of time between frames are sent to the display, it makes sense to me to show the data in reference to the refresh cycle, but it also requires the conversion present in the function, multiplying by 60 divided by 1000, to arrive at that unit.

\subsubsection{meanMS Custom Function (Arithmetic Mean and Median)}
\begin{styleR}
meanMS	=	function(DATA)	{
	out			=	c(mean(DATA), median(DATA))
	names(out)	=	c("Mean", "Median")
	return(out)
}
\end{styleR}

With the various graph label function covered, time to get into the statistic functions, starting with \textbf{meanMS}, which has a slightly misleading name.
This function provides provides both the arithmetic mean and the median, in milliseconds.
The reason for this is because if it only returned the mean, I would not be able to set the name of the value as I wish, which seems to be a quirk of R's with its \textbf{aggregate} function that shows up later.
In any case, the function has a \textbf{DATA} argument and it creates a vector holding the arithmetic mean and the median of that data.
These values are stored in the \textbf{out} variable and then the names, "Mean" and "Median," are applied to the vector before it is returned by the function.

The \textbf{names} function when run on a list or vector will return the names for the elements, but when strings are assigned to it like this, the strings will become the names for the elements.

The built in \textbf{mean} and \textbf{median} functions do the work so \textbf{meanMS} really only serves to collect their outputs together and apply names to them.

\subsubsection{meanGEO Custom Function (Geometric Mean and Normalization)}
\begin{styleR}
meanGEO	=	function(DATA)	{
	out			=	exp(mean(log(DATA)))
	names(out)	=	"ms"
	return(out)
}

normGEO	=	function(DATA)	{
	out			=	DATA / max(DATA) * 100
	names(out)	=	"Normalized (%)"
	return(out)
}
\end{styleR}

The \textbf{meanGEO} function is for providing the geometric mean of the data, and interestingly R does not have a built-in function for it.
This means I have to provide the algorithm myself, which is to take the arithmetic mean of the logarithm of the data, and then use the exponent function to undo the log.
The name is set to be "ms," the unit for the performance data it is provided, but because R will not actually apply the name and I rarely use this function, it hardly matters.

Since one of the advantages to using the geometric means is the equal weight of percentage changes between results, it makes sense to normalize the data to percentages for easy reading, which is the purpose of \textbf{normGEO}.
Though not limited to working on geometric means, this function is intended for that purpose.
It divides the values it receives by the maximum of those values, which would be the longest frame time in the data.
This means lower values are better, as that indicates shorter frame times and faster rendering.
To make them a percentage, the value is multiplied by 100 and then the name is applied.
It is possible to make this function fancier, so the value normalized by is not always the longest frame time, but as I do not intend to deploy the geometric mean often, I do not feel the need to make this function that much more complicated.

\subsubsection{percMS Custom Function (Percentiles)}
\begin{styleR}
percMS	=	function(DATA, listPERC = c(0.1, 1, 99, 99.9))	{
	if	(max(listPERC) > 1)		listPERC	=	listPERC/100

	out			=	quantile(DATA, listPERC)
	names(out)	=	paste0(listPERC * 100, "%")
	return(out)
}
\end{styleR}

The \textbf{meanGEO} function is for providing the geometric mean of the data, and interestingly R does not have a built-in function for it.
This means I have to provide the algorithm myself, which is to take the arithmetic mean of the logarithm of the data, and then use the exponent function to undo the log.
The name is set to be "ms," the unit for the performance data it is provided, but because R will not actually apply the name and I rarely use this function, it hardly matters.

Since one of the advantages to using the geometric means is the equal weight of percentage changes between results, it makes sense to normalize the data to percentages for easy reading, which is the purpose of \textbf{normGEO}.
Though not limited to working on geometric means, this function is intended for that purpose.
It divides the values it receives by the maximum of those values, which would be the longest frame time in the data.
This means lower values are better, as that indicates shorter frame times and faster rendering.
To make them a percentage, the value is multiplied by 100 and then the name is applied.
It is possible to make this function fancier, so the value normalized by is not always the longest frame time, but as I do not intend to deploy the geometric mean often, I do not feel the need to make this function that much more complicated.

\subsubsection{ecdfFPS Custom Function (ECDF)}
\begin{styleR}
ecdfFPS	=	function(DATA, listFPS = NULL, r = 2)	{
	default		=	c(60, 50, 30, 20, 15)
	listFPS		=	unique(sort(c(default, listFPS), decreasing = TRUE))
	out			=	100 * (1 - ecdf(DATA)(1000 / listFPS))
	names(out)	=	paste0(listFPS, " FPS")

	return(round(out, r))
}
\end{styleR}

The empirical cumulative distribution function, \textbf{ecdf}, is the reverse of the \textbf{quantile} function, so instead of providing the value that corresponds to the probability you ask for, it returns the probability for a given value.
This is very helpful for finding how often a recording is below certain performance targets, and because the targets of interest can change, I got a bit fancy with this function.

The arguments for this function are \textbf{DATA}, just like the previous and future functions, \textbf{listFPS}, and an argument named just \textbf{r}.
That last argument is for controlling the rounding of the output, and by default I use two places, but I can change this if I want.

The \textbf{listFPS} argument is set to NULL, which may seem odd as it would seem to be the list of frame rates to have their corresponding probabilities found for, but there is a reason for this.
The default list of frame rates I want checked is provided within the function on the first line, and at the second line the \textbf{listFPS} variable can be changed to have additional values added to it.
These added frame rates to test, and potentially more, will then be added to the compact table I produce, as my adding them for this function implies they are of interest.
We will see how this works when we get to the \textbf{compTAB} later.

To combine the lists on the second line, the first thing I do is actually combine them by setting \textbf{default} and \textbf{listFPS} to be the elements of a new vector.
This vector is then has the \textbf{sort} function applied to it, with the \textbf{decreasing} argument set to true, placing the greatest values at the front of the list.
In case the list I provide has any overlap with the default, the \textbf{unique} function is used to clean out any duplicates.
Actually it can be beneficial to pass a value I know overlaps, because this will cause it to be included in the compact table but will not disrupt any other outputs.

The third line is where we finally find the \textbf{ecdf} function, and it works in a different method than other functions.
The reason is that it is not actually producing values as an output, but building the empirical cumulative distribution function for the data it is provided.
This means that to get the output for specific values, you need to supply them like arguments for a function.
This is why they are in parentheses next to the \textbf{ecdf} function, after it is passed \textbf{DATA} as an argument.

The purpose of multiplying by 100 and subtracting the output of the \textbf{ecdf} function from 1 is to have outputs as the percentage of time spent below a certain value.
The function would normally provide the time spent above that value, so subtracting that from one gets the time spent below, and the multiplication coverts the result from a decimal representation to a percentage.
This is a slight complication from the fact that working in frame times means the lower values indicate greater performance and ECDF starts from the left, at the lower values, and goes right to the greater values.

The names are now applied to the list of results and that list, when it is returned by the \textbf{ecdfFPS} function, will be rounded to the number of places set.

\subsubsection{statMS Custom Function (Miscellaneous Statistics)}
\begin{styleR}
statMS	=	function(DATA, r = 2)	{
	out			=	c(mean(DATA), sd(DATA), sd(DATA)/mean(DATA) * 100, skewness(DATA), kurtosis(DATA))
	names(out)	=	c("Mean (ms)", "StDev (ms)", "CoV (%)", "Skew", "Kurtosis")
	return(round(out, r))
\end{styleR}

The \textbf{statMS} function is for providing some miscellaneous statistics from the data that chances are I will not use, but may still prove nice to examine in the future.
It works pretty simply as it takes a \textbf{DATA} argument, and like the \textbf{ecdfFPS} function has an \textbf{r} argument that will control rounding the output.

Once inside the function, the \textbf{out} variable is assigned a vector where the elements are a collection of statistics.
The first of these is the arithmetic mean, followed by the standard deviation using the \textbf{sd} function.
After this is the coefficient of variability, which is the standard deviation divided by the mean, and I have it here as a percentage.
The final two statistics are the skew and kurtosis of the data, calculated by the \textbf{skewness} and \textbf{kurtosis} functions from the \textit{moments} library.

After creating this vector of statistics for \textbf{out}, the names for \textbf{out} are applied to make it easy to remember what each value is.
With that done, all that is left is to apply the \textbf{round} function and have that result returned by the function.

\subsubsection{BoxPerc Custom Function (Custom Box Plot)}
\begin{styleR}
BoxPerc	=	function (DATA)	{
	out			=	quantile(DATA, c(0.001, 0.01, 0.5, 0.99, 0.999))
	names(out)	=	c("ymin", "lower", "middle", "upper", "ymax")
	return(out)
}
\end{styleR}

Unlike the previous functions that are ultimately used for text outputs, the \textbf{BoxPerc} function is for the Means graph, by getting the necessary statistics for the custom box plot.
Normally a box plot marks the quartiles with the box and the length of the whiskers, but I want the 0.1\%, 1\%, 99\%, and 99.9\% percentiles to be shown.
Fortunately it is possible to provide a custom function to \textit{ggplot2} to create a custom box plot, if it is formatted correctly.

To get the desired percentiles from \textbf{DATA}, the \textbf{quantile} function is used, but it looks at more than the percentiles I just listed.
A custom box plot also needs its middle line to be specified, which is normally the median and I see no reason to change that.
Instead of using the \textbf{median} function, though, I just pass \textbf{quantile} 0.5, which produces the same value.
I also have all of the values for \textbf{quantile} already in decimal form instead of percentages, as that is its expectation.

With results of the \textbf{quantile} function assigned to \textbf{out}, the \textbf{names} function can be used to label the values as \textit{ggplot2} will expect them to be.
The outer values are \textbf{ymin} and \textbf{ymax}, being the ends of the whiskers, while \textbf{lower} and \textbf{upper} are the top and bottom of the box, and \textbf{middle} is where the middle line is drawn.

With the names set for \textbf{out}, all that is left is to state what the function should return.

\subsubsection{qqslope Custom Function (QQ Theoretical Line Slope)}
\begin{styleR}
qqslope	=	function (DATA, r = 2, quan = QUAN)	{
	y		=	quantile(DATA, quan)
	#x		=	qnorm(quan)
	x		=	100 * quan
	#	to make this be in percentile instead of Z-score
	slope	=	diff(y)/diff(x)
	return(round(slope, r))
}
\end{styleR}

As was shown in the previous sections on the graphs, I have made changes to the QQ graphs to include a line between two quantiles, to help show the behavior of the data on the plots, and a label with the slope printed for easy comparison.
This function is what calculates the slope for use in that label.
Its arguments are \textbf{DATA}, the rounding place, and the two quantiles to use, which are stored in the \textbf{QUAN} variable set in the Input.r script.

Within the function, the Y and X values are determined for the two points the QQ line will connect.
The Y values are found by using the \textbf{quantile} function on \textbf{DATA} with the provided probabilities.
The X values are now found correctly by converting the \textbf{QUAN} values to percentages.
When I originally made this function I used the \textbf{qnorm} function to get the correct Z-score values for the provided quantile, but it was not until later I realized this was incorrect to do.
The graph uses an X-scale with percentiles as units, so this function should have done the same.
I am keeping the original version here, as a reminder of my mistake.

With this correction, the units for the slope would be milliseconds per percentage.
This output is rounded to two decimal places then, using the \textbf{round} function and the default value for the \textbf{r} argument.

\subsubsection{statGRAPH Custom Function (Graph-Used Statistics)}
\begin{styleR}
statGRAPH	=	function(DATA, ...)	{
	out			=	c(mean(DATA), median(DATA), median(diff(DATA)), qqslope(DATA, ...), quantile(DATA, c(0.1, 1, 99, 99.9)/100))
	names(out)	=	c("Mean", "Median", "DiffMedian", "Slope", "0.1", "1", "99", "99.9")
	return(out)
}
\end{styleR}

This \textbf{statGRAPH} function is for calculating certain statistics that will be made use of in graphs, and not for any text output.
One of the more recent changes I have made to the scripts relates to this fact, but that will be discussed later.

Its arguments are a bit different than we have been seeing, as the "..." symbol is present.
This tells the function to also accept arbitrary arguments, which is helpful when there are functions to be called within it.
This lower function is the \textbf{qqslope} function I just described, which is why we see dot-dot-dot argument there.
If I want to change the rounding or the \textbf{QUAN} variable, I can still supply the values to \textbf{statGRAPH}, with the appropriate argument names, and they will be passed on to the \textbf{qqslope} function.

Besides getting the slope for the QQ line, this function also provides the arithmetic mean, the median, the median of the consecutive differences, and the quantiles corresponding to 0.1\%, 1\%, 99\%, and 99.9\%.
These percentiles are written into the function and cannot be altered by an argument because those are the specific values I want for a graph.

Lastly the names are provided and then the output is returned.
These names are very important because they are what the graphs will use to identify the data they are to use.

This is the last custom function I have for actually calculating statistics from the data, which is why this section will now end.
The next section will be concerned with calculating the various statistics, using the functions of this section, for the text outputs.
